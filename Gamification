"use client";
import React from "react";
import Footer from "../components/footer";
import Navigation from "../components/navigation";

function MainComponent() {
  const [selectedTab, setSelectedTab] = useState("leaderboard");
  const [userPoints, setUserPoints] = useState(0);
  const [completedChallenges, setCompletedChallenges] = useState([]);
  const [challenges, setChallenges] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchChallenges = async () => {
      try {
        const response = await fetch("/api/challenges");
        const data = await response.json();
        setChallenges([
          {
            id: 1,
            title: "Daily Walk",
            description: "Walk 10,000 steps",
            points: 100,
            difficulty: "Easy",
            reward: "🏃‍♂️ Walking Champion Badge",
          },
          {
            id: 2,
            title: "Meditation",
            description: "Meditate for 15 minutes",
            points: 150,
            difficulty: "Medium",
            reward: "🧘‍♂️ Meditation Master Badge",
          },
          {
            id: 3,
            title: "Hydration",
            description: "Drink 8 glasses of water",
            points: 80,
            difficulty: "Easy",
            reward: "💧 Hydration Hero Badge",
          },
        ]);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching challenges:", error);
        setLoading(false);
      }
    };
    fetchChallenges();
  }, []);

  const leaderboardData = [
    {
      rank: 1,
      name: "Raja Kumar",
      badge: "👑",
      level: "Level 50",
      points: 12500,
    },
    {
      rank: 2,
      name: "Priya Devi",
      badge: "🥈",
      level: "Level 45",
      points: 11200,
    },
    {
      rank: 3,
      name: "Karthik Rajan",
      badge: "🥉",
      level: "Level 42",
      points: 10800,
    },
    {
      rank: 4,
      name: "Tamil Selvi",
      badge: "⭐",
      level: "Level 38",
      points: 9500,
    },
    {
      rank: 5,
      name: "Suresh Kumar",
      badge: "⭐",
      level: "Level 35",
      points: 8900,
    },
  ];
  const handleCompleteChallenge = async (challengeId) => {
    try {
      const response = await fetch("/api/challenges/complete", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ challengeId }),
      });

      if (response.ok) {
        const challenge = challenges.find((c) => c.id === challengeId);
        setCompletedChallenges([...completedChallenges, challengeId]);
        setUserPoints(userPoints + challenge.points);
      }
    } catch (error) {
      console.error("Error completing challenge:", error);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-[#1a1a2e] to-[#16213e] text-white font-roboto">
      <Navigation activePage="/gamification" />

      <main className="container mx-auto px-4 py-8">
        <h1 className="text-4xl font-bold text-center mb-10">
          Gamification Center
        </h1>
        <div className="flex justify-center space-x-4 mb-8">
          <button
            onClick={() => setSelectedTab("leaderboard")}
            className={`px-6 py-2 rounded-full ${
              selectedTab === "leaderboard"
                ? "bg-[#4a90e2] text-white"
                : "bg-[#2c3e50] text-gray-300"
            }`}
          >
            Leaderboard
          </button>
          <button
            onClick={() => setSelectedTab("challenges")}
            className={`px-6 py-2 rounded-full ${
              selectedTab === "challenges"
                ? "bg-[#4a90e2] text-white"
                : "bg-[#2c3e50] text-gray-300"
            }`}
          >
            Challenges
          </button>
        </div>
        <div className="mb-8 bg-[#1f2937] rounded-lg p-6">
          <h2 className="text-2xl font-semibold mb-4">Your Progress</h2>
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-300">Total Points</p>
              <p className="text-3xl font-bold text-[#4a90e2]">{userPoints}</p>
            </div>
            <div>
              <p className="text-gray-300">Completed Challenges</p>
              <p className="text-3xl font-bold text-[#4a90e2]">
                {completedChallenges.length}
              </p>
            </div>
          </div>
        </div>

        {selectedTab === "leaderboard" ? (
          <div className="bg-[#1f2937] rounded-lg p-6">
            <h2 className="text-2xl font-semibold mb-6 flex items-center">
              <i className="fas fa-trophy text-yellow-500 mr-2"></i>
              Top Players
            </h2>
            <div className="space-y-4">
              {leaderboardData.map((player, index) => (
                <div
                  key={player.rank}
                  className={`relative flex items-center justify-between p-4 rounded-lg transition-all duration-300 ${
                    index === 0
                      ? "bg-gradient-to-r from-yellow-500/20 to-yellow-600/20 border border-yellow-500/30"
                      : index === 1
                      ? "bg-gradient-to-r from-gray-400/20 to-gray-500/20 border border-gray-400/30"
                      : index === 2
                      ? "bg-gradient-to-r from-orange-700/20 to-orange-800/20 border border-orange-700/30"
                      : "bg-[#374151] hover:bg-[#4B5563]"
                  }`}
                >
                  <div className="absolute -left-2 top-1/2 -translate-y-1/2 w-8 h-8 flex items-center justify-center rounded-full bg-[#1f2937] border-2 border-[#4a90e2]">
                    {index + 1}
                  </div>
                  <div className="flex items-center space-x-4 ml-8">
                    <div className="w-12 h-12 rounded-full bg-[#2d3748] flex items-center justify-center">
                      <span className="text-2xl">{player.badge}</span>
                    </div>
                    <div>
                      <span className="text-xl font-semibold block">
                        {player.name}
                      </span>
                      <div className="flex items-center space-x-2">
                        <span className="text-sm text-gray-400">
                          {player.level}
                        </span>
                        <div className="h-1.5 w-20 bg-[#374151] rounded-full overflow-hidden">
                          <div
                            className="h-full bg-[#4a90e2] rounded-full"
                            style={{ width: "60%" }}
                          ></div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center space-x-4">
                    <div className="text-right">
                      <span className="text-[#4a90e2] font-semibold block">
                        {player.points} points
                      </span>
                      <span className="text-xs text-gray-400">This Week</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        ) : (
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {loading ? (
              <div className="col-span-3 text-center py-8">
                <i className="fas fa-spinner fa-spin text-4xl text-[#4a90e2]"></i>
              </div>
            ) : (
              challenges.map((challenge) => (
                <div
                  key={challenge.id}
                  className="bg-[#1f2937] rounded-lg p-6 hover:transform hover:scale-105 transition-all"
                >
                  <h3 className="text-xl font-semibold mb-2">
                    {challenge.title}
                  </h3>
                  <p className="text-gray-300 mb-4">{challenge.description}</p>
                  <div className="space-y-3">
                    <div className="flex justify-between items-center">
                      <span className="text-[#4a90e2] font-semibold">
                        {challenge.points} points
                      </span>
                      <span className="bg-[#374151] px-3 py-1 rounded-full text-sm">
                        {challenge.difficulty}
                      </span>
                    </div>
                    <div className="text-gray-300 text-sm">
                      <span className="block">Reward:</span>
                      <span className="text-lg">{challenge.reward}</span>
                    </div>
                    <button
                      className="w-full bg-[#4a90e2] hover:bg-[#357ABD] text-white py-2 rounded-lg transition-colors"
                      onClick={() => handleCompleteChallenge(challenge.id)}
                      disabled={completedChallenges.includes(challenge.id)}
                    >
                      {completedChallenges.includes(challenge.id)
                        ? "Completed"
                        : "Start"}
                    </button>
                  </div>
                </div>
              ))
            )}
          </div>
        )}
      </main>

      <Footer />
    </div>
  );
}

export default MainComponent;
