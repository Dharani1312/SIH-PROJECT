"use client";
import React from "react";
import Footer from "../components/footer";
import Navigation from "../components/navigation";

function MainComponent() {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [healthScore, setHealthScore] = useState(0);
  const [stats, setStats] = useState([
    {
      title: "Heart Rate",
      value: "0 BPM",
      icon: "fa-solid fa-heartbeat",
      color: "text-red-600",
      bg: "bg-red-100",
      trend: "0%",
    },
    {
      title: "Steps",
      value: "0",
      icon: "fa-solid fa-person-walking",
      color: "text-green-600",
      bg: "bg-green-100",
      trend: "0%",
    },
    {
      title: "Sleep",
      value: "0 hrs",
      icon: "fa-solid fa-moon",
      color: "text-purple-600",
      bg: "bg-purple-100",
      trend: "0%",
    },
    {
      title: "Calories",
      value: "0",
      icon: "fa-solid fa-fire",
      color: "text-orange-600",
      bg: "bg-orange-100",
      trend: "0%",
    },
  ]);
  const days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  const months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];
  const getDaysInMonth = (date) => {
    const year = date.getFullYear();
    const month = date.getMonth();
    return new Date(year, month + 1, 0).getDate();
  };
  const generateCalendarDays = () => {
    const daysInMonth = getDaysInMonth(currentDate);
    const firstDay = new Date(
      currentDate.getFullYear(),
      currentDate.getMonth(),
      1
    ).getDay();
    const days = [];

    for (let i = 0; i < firstDay; i++) {
      days.push(null);
    }

    for (let i = 1; i <= daysInMonth; i++) {
      days.push(i);
    }

    return days;
  };
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch("/api/healthmetrics");
        const result = await response.json();
        setData(result);
        setHealthScore(result.healthScore);
        setStats((prevStats) =>
          prevStats.map((stat) => ({
            ...stat,
            value:
              result[stat.title.toLowerCase().replace(" ", "_")] || stat.value,
            trend:
              result[`${stat.title.toLowerCase().replace(" ", "_")}_trend`] ||
              stat.trend,
          }))
        );
      } catch (err) {
        setError("Failed to load health data");
      } finally {
        setLoading(false);
      }
    };

    fetchData();
    const interval = setInterval(fetchData, 5000);
    return () => clearInterval(interval);
  }, []);

  return (
    <div className="min-h-screen bg-gradient-to-b from-[#f8fafc] to-[#f1f5f9] p-4">
      <Navigation activePage="/dashboard" />
      <div className="max-w-7xl mx-auto">
        {loading ? (
          <div className="flex justify-center items-center h-64">
            <i className="fas fa-spinner fa-spin text-4xl text-blue-500"></i>
          </div>
        ) : error ? (
          <div className="text-red-500 text-center p-4">{error}</div>
        ) : (
          <>
            <h1 className="text-3xl font-bold text-gray-800 mb-6">
              Health Monitoring
            </h1>
            <div className="mb-8">
              <div className="bg-white p-6 rounded-lg shadow-lg mb-4 hover:shadow-xl transition-shadow">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-xl font-semibold">Health Status</h2>
                  <div className="text-2xl font-bold text-green-600">
                    {healthScore}%
                  </div>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2.5">
                  <div
                    className="bg-green-600 h-2.5 rounded-full transition-all duration-500"
                    style={{ width: `${healthScore}%` }}
                  ></div>
                </div>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {stats.map((stat, index) => (
                  <div
                    key={index}
                    className="bg-white p-6 rounded-lg shadow-lg hover:shadow-xl transition-shadow"
                  >
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm text-gray-500">{stat.title}</p>
                        <p className="text-2xl font-semibold mt-1">
                          {stat.value}
                        </p>
                        <span
                          className={`text-sm ${
                            stat.trend.startsWith("+")
                              ? "text-green-500"
                              : "text-red-500"
                          }`}
                        >
                          {stat.trend} Today
                        </span>
                      </div>
                      <div
                        className={`w-12 h-12 ${stat.bg} rounded-full flex items-center justify-center transform hover:scale-110 transition-transform`}
                      >
                        <i className={`${stat.icon} ${stat.color} text-xl`}></i>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
              <div className="bg-white rounded-lg shadow-sm p-6 col-span-2">
                <div className="flex justify-between items-center mb-4">
                  <h2 className="text-xl font-semibold">
                    {months[currentDate.getMonth()]} {currentDate.getFullYear()}
                  </h2>
                  <div className="flex gap-2">
                    <button
                      onClick={() =>
                        setCurrentDate(
                          new Date(
                            currentDate.setMonth(currentDate.getMonth() - 1)
                          )
                        )
                      }
                      className="p-2 hover:bg-gray-100 rounded"
                    >
                      <i className="fa-solid fa-chevron-left"></i>
                    </button>
                    <button
                      onClick={() =>
                        setCurrentDate(
                          new Date(
                            currentDate.setMonth(currentDate.getMonth() + 1)
                          )
                        )
                      }
                      className="p-2 hover:bg-gray-100 rounded"
                    >
                      <i className="fa-solid fa-chevron-right"></i>
                    </button>
                  </div>
                </div>
                <div className="grid grid-cols-7 gap-1">
                  {days.map((day) => (
                    <div
                      key={day}
                      className="text-center text-sm font-medium text-gray-600 py-2"
                    >
                      {day}
                    </div>
                  ))}
                  {generateCalendarDays().map((day, index) => (
                    <div
                      key={index}
                      className={`h-20 border rounded-lg p-1 ${
                        day === selectedDate.getDate() &&
                        currentDate.getMonth() === selectedDate.getMonth() &&
                        currentDate.getFullYear() === selectedDate.getFullYear()
                          ? "bg-blue-50 border-blue-200"
                          : "hover:bg-gray-50"
                      }`}
                      onClick={() =>
                        day &&
                        setSelectedDate(
                          new Date(
                            currentDate.getFullYear(),
                            currentDate.getMonth(),
                            day
                          )
                        )
                      }
                    >
                      {day && <span className="text-sm">{day}</span>}
                    </div>
                  ))}
                </div>
              </div>

              <div className="space-y-6">
                <div className="bg-white rounded-lg shadow-lg p-6 hover:shadow-xl transition-shadow">
                  <h2 className="text-xl font-semibold mb-4">
                    Upcoming Appointments
                  </h2>
                  <div className="space-y-4">
                    {selectedDate && (
                      <>
                        <div className="p-4 bg-blue-50 rounded-lg">
                          <p className="font-medium">Selected Date:</p>
                          <p>{selectedDate.toLocaleDateString()}</p>
                        </div>
                        <div className="border-l-4 border-blue-500 pl-4">
                          <p className="font-medium">Fitness Class</p>
                          <p className="text-sm text-gray-600">9:00 AM</p>
                        </div>
                        <div className="border-l-4 border-green-500 pl-4">
                          <p className="font-medium">Yoga Session</p>
                          <p className="text-sm text-gray-600">5:00 PM</p>
                        </div>
                      </>
                    )}
                  </div>
                </div>

                <div className="bg-white rounded-lg shadow-lg p-6 hover:shadow-xl transition-shadow">
                  <h2 className="text-xl font-semibold mb-4">Health Tips</h2>
                  <div className="space-y-4">
                    <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg hover:bg-green-100 transition-colors">
                      <span>Stay Hydrated</span>
                      <i className="fa-solid fa-glass-water text-green-600"></i>
                    </div>
                    <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg hover:bg-blue-100 transition-colors">
                      <span>Sleep Time</span>
                      <i className="fa-solid fa-bed text-blue-600"></i>
                    </div>
                    <div className="flex items-center justify-between p-3 bg-yellow-50 rounded-lg hover:bg-yellow-100 transition-colors">
                      <span>Exercise</span>
                      <i className="fa-solid fa-dumbbell text-yellow-600"></i>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </>
        )}
      </div>
      <Footer />
    </div>
  );
}

export default MainComponent;
