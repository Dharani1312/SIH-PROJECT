"use client";
import React from "react";
import Footer from "../components/footer";
import Navigation from "../components/navigation";

function MainComponent() {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [date, setDate] = useState("");
  const [time, setTime] = useState("");
  const [issue, setIssue] = useState("");
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState("");
  const [appointments, setAppointments] = useState([]);
  const [availableSlots, setAvailableSlots] = useState([]);
  const [selectedDoctor, setSelectedDoctor] = useState("");

  useEffect(() => {
    const fetchAppointments = async () => {
      const { data, error } = await db.from("Appointments").select("*");
      if (error) {
        console.error("Error fetching appointments:", error);
        return;
      }
      setAppointments(data);
      generateAvailableSlots(data);
    };
    fetchAppointments();
  }, []);

  const generateAvailableSlots = (bookedAppointments) => {
    const slots = [];
    const doctors = ["Dr. Ramesh", "Dr. Priya", "Dr. Suresh"];
    const times = ["09:00", "10:00", "11:00", "14:00", "15:00", "16:00"];

    for (let i = 0; i < 7; i++) {
      const currentDate = new Date();
      currentDate.setDate(currentDate.getDate() + i);

      for (const doctor of doctors) {
        for (const time of times) {
          const isBooked = bookedAppointments.some(
            (apt) =>
              apt.date === currentDate.toISOString().split("T")[0] &&
              apt.time === time &&
              apt.doctor === doctor
          );

          if (!isBooked) {
            slots.push({
              date: currentDate.toISOString().split("T")[0],
              time: time,
              doctor: doctor,
            });
          }
        }
      }
    }
    setAvailableSlots(slots);
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError("");

    try {
      const { data, error } = await db.from("Appointments").insert([
        {
          name,
          email,
          phone,
          date,
          time,
          doctor: selectedDoctor,
          issue,
          status: "scheduled",
        },
      ]);

      if (error) throw error;

      setSuccess(true);
      setTimeout(() => setSuccess(false), 3000);

      setName("");
      setEmail("");
      setPhone("");
      setDate("");
      setTime("");
      setSelectedDoctor("");
      setIssue("");

      const { data: updatedAppointments } = await db
        .from("Appointments")
        .select("*");
      generateAvailableSlots(updatedAppointments);
    } catch (error) {
      console.error("Error booking appointment:", error);
      setError("Failed to book appointment. Please try again.");
    } finally {
      setLoading(false);
    }
  };
  const therapyGuides = [
    {
      title: "Back Pain Exercises",
      description: "Simple exercises to help relieve back pain",
      image: "/back-exercise.jpg",
    },
    {
      title: "Joint Pain Solutions",
      description: "Home therapy methods for joint pain relief",
      image: "/joint-therapy.jpg",
    },
    {
      title: "Muscle Pain Relief",
      description: "Relief exercises for muscle pain",
      image: "/muscle-relief.jpg",
    },
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      <Navigation activePage="/physiotherapy" />
      <div className="bg-gradient-to-r from-[#4A90E2] to-[#357ABD] text-white py-20 px-4">
        <div className="container mx-auto text-center">
          <h1 className="text-4xl md:text-5xl font-bold mb-4">
            Physiotherapy Services
          </h1>
          <p className="text-xl md:text-2xl">
            Expert treatment to help you recover and heal
          </p>
        </div>
      </div>

      <div className="container mx-auto py-12 px-4">
        <div className="max-w-5xl mx-auto">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <div className="md:col-span-2 bg-white rounded-lg shadow-lg p-6">
              <h2 className="text-2xl font-bold mb-6 text-center">
                Book an Appointment
              </h2>
              <form onSubmit={handleSubmit} className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <label className="block mb-2 text-gray-700">Name</label>
                    <input
                      type="text"
                      name="name"
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#4A90E2] focus:border-transparent"
                      value={name}
                      onChange={(e) => setName(e.target.value)}
                      required
                    />
                  </div>
                  <div>
                    <label className="block mb-2 text-gray-700">Email</label>
                    <input
                      type="email"
                      name="email"
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#4A90E2] focus:border-transparent"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      required
                    />
                  </div>
                  <div>
                    <label className="block mb-2 text-gray-700">Phone</label>
                    <input
                      type="tel"
                      name="phone"
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#4A90E2] focus:border-transparent"
                      value={phone}
                      onChange={(e) => setPhone(e.target.value)}
                      required
                    />
                  </div>
                  <div>
                    <label className="block mb-2 text-gray-700">Date</label>
                    <input
                      type="date"
                      name="date"
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#4A90E2] focus:border-transparent"
                      value={date}
                      onChange={(e) => setDate(e.target.value)}
                      required
                    />
                  </div>
                  <div>
                    <label className="block mb-2 text-gray-700">Time</label>
                    <input
                      type="time"
                      name="time"
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#4A90E2] focus:border-transparent"
                      value={time}
                      onChange={(e) => setTime(e.target.value)}
                      required
                    />
                  </div>
                  <div className="md:col-span-2">
                    <label className="block mb-2 text-gray-700">
                      Issue Details
                    </label>
                    <textarea
                      name="issue"
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#4A90E2] focus:border-transparent h-32"
                      value={issue}
                      onChange={(e) => setIssue(e.target.value)}
                      required
                    ></textarea>
                  </div>
                </div>
                <div>
                  {error && <div className="text-red-500 mb-4">{error}</div>}
                  <button
                    className={`w-full py-4 rounded-lg mt-6 flex items-center justify-center text-lg transition-colors duration-200 ${
                      loading
                        ? "bg-gray-400"
                        : success
                        ? "bg-green-500"
                        : "bg-[#4A90E2] hover:bg-[#357ABD]"
                    } text-white`}
                    disabled={loading}
                  >
                    {loading ? (
                      <i className="fas fa-spinner fa-spin mr-2"></i>
                    ) : success ? (
                      <>
                        <i className="fas fa-check mr-2"></i>Appointment Booked
                        Successfully!
                      </>
                    ) : (
                      "Book Appointment"
                    )}
                  </button>
                </div>
              </form>
            </div>
            <div className="bg-white rounded-lg shadow-lg p-6">
              <h3 className="text-xl font-bold mb-4">Available Time Slots</h3>
              <div className="space-y-3">
                {availableSlots.map((slot, index) => (
                  <button
                    key={index}
                    onClick={() => {
                      setDate(slot.date);
                      setTime(slot.time);
                      setSelectedDoctor(slot.doctor);
                    }}
                    className={`w-full p-4 rounded-lg text-left transition-colors duration-200 ${
                      date === slot.date && time === slot.time
                        ? "bg-[#4A90E2] text-white"
                        : "bg-gray-50 hover:bg-gray-100"
                    }`}
                  >
                    <div className="font-semibold">{slot.date}</div>
                    <div className="text-sm mt-1">{slot.time}</div>
                    <div className="text-sm mt-1">{slot.doctor}</div>
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto py-12 px-4">
        <h2 className="text-3xl font-bold text-center mb-8">Therapy Guides</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {therapyGuides.map((guide, index) => (
            <div
              key={index}
              className="bg-white rounded-lg shadow-lg overflow-hidden"
            >
              <img
                src={guide.image}
                alt={guide.title}
                className="w-full h-48 object-cover"
              />
              <div className="p-4">
                <h3 className="text-xl font-bold mb-2">{guide.title}</h3>
                <p className="text-gray-600">{guide.description}</p>
                <button className="mt-4 text-[#4A90E2] hover:text-[#357ABD]">
                  Read More <i className="fas fa-arrow-right ml-2"></i>
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      <Footer />
    </div>
  );
}

export default MainComponent;
